---
- name: Create directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "{{ consensus_dir }}"
    - "{{ execution_dir }}"

- name: Generate JWT Secret file
  command: openssl rand -hex 32
  register: jwt_secret

- name: Copy JWT Secret to file
  copy:
    content: "{{ jwt_secret.stdout }}"
    dest: "{{ jwt_path }}"
    mode: '0600'

- name: Install Prysm
  get_url:
    url: "{{ prysm_url }}"
    dest: "{{ consensus_dir }}/prysm.sh"
    mode: '0755'

- name: Fetch the latest Geth release data
  uri:
    url: "{{ geth_latest_release_url }}"
    return_content: yes
  register: geth_release

- name: Parse Geth tag name
  set_fact:
    tag_name: "{{ geth_release.json.tag_name }}"

- name: Fetch commit hash for tag
  uri:
    url: "{{ geth_commit_url }}/{{ tag_name }}"
    return_content: yes
  register: commit_data

- name: Parse commit hash
  set_fact:
    commit_hash: "{{ commit_data.json.object.sha }}"

- name: Remove 'v' prefix from version number
  set_fact:
    version_number: "{{ tag_name[1:] }}"

- name: Extract the first 8 characters of commit hash
  set_fact:
    short_commit_hash: "{{ commit_hash[:8] }}"

- name: Construct download URL
  set_fact:
    latest_url: "{{ geth_store_base_url }}/geth-linux-amd64-{{ version_number }}-{{ short_commit_hash }}.tar.gz"

- name: Download Geth tarball
  get_url:
    url: "{{ latest_url }}"
    dest: "{{ execution_dir }}/geth.tar.gz"

- name: Extract Geth tarball
  unarchive:
    src: "{{ execution_dir }}/geth.tar.gz"
    dest: "{{ execution_dir }}"
    remote_src: yes

- name: Find Geth directory
  shell: "tar -tf {{ execution_dir }}/geth.tar.gz | grep -Eo '^[^/]+' | uniq"
  register: geth_dir
  changed_when: false

- name: Debug Geth directory name
  debug:
    msg: "Geth directory name: '{{ geth_dir.stdout }}'"

- name: Ensure Node.js and npm are installed
  apt:
    name: 
      - nodejs
      - npm
    state: present
  become: yes

- name: Install pm2 globally
  npm:
    name: pm2
    global: yes
  become: yes

- name: Check for running PM2 services
  shell: pm2 list --silent --no-color | grep -i 'online'
  register: pm2_services_running
  failed_when: false
  changed_when: false

- name: Stop all running PM2 services
  shell: pm2 stop all
  when: pm2_services_running.stdout != ''
  become: yes

- name: Delete all PM2 services
  shell: pm2 delete all
  when: pm2_services_running.stdout != ''
  become: yes

- name: Run Geth with pm2 as root
  become: yes
  shell: |
    pm2 start --name geth "{{ execution_dir }}/{{ geth_dir.stdout | trim }}/geth" -- --{{ network }} --http --http.api eth,net,engine,admin --authrpc.jwtsecret={{ jwt_path }} --http.addr 0.0.0.0 > {{ execution_dir }}/geth_output.log 2>&1

- name: Run Beacon Node with pm2 as root
  become: yes
  shell: |
    pm2 start --name beacon-node "{{ consensus_dir }}/prysm.sh" -- beacon-chain --accept-terms-of-use --execution-endpoint=http://localhost:8551 --{{ network }} --jwt-secret={{ jwt_path }} --checkpoint-sync-url={{ checkpoint_sync_url }} --genesis-beacon-api-url={{ genesis_beacon_api_url }} > {{ consensus_dir }}/beacon_node_output.log 2>&1


- name: Register pm2 as systemd service to ensure geth start on reboot
  become: yes
  shell: |
    pm2 startup systemd
    pm2 save

- name: Verify pm2 service is enabled
  command: systemctl is-enabled pm2-root
  register: pm2_service_status
  changed_when: false

- name: Display pm2 service status
  debug:
    msg: "PM2 service is enabled: {{ pm2_service_status.stdout }}"

- name: Display running services
  debug:
    msg: "Geth and Beacon Node are running with pm2."

- name: List active pm2 processes
  become: yes
  shell: pm2 list
  register: pm2_process_list
  ignore_errors: yes

- name: Debug pm2 list output
  debug:
    var: pm2_process_list.stdout_lines